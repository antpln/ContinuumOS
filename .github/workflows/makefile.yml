name: build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:        # ← this line enables gh workflow run

env:
  TARGET: i686-elf          # <‑‑ single source of truth
  GCC_VERSION: "13.2.0"     # bump once a year to keep CVEs away

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1 – Source code
    - uses: actions/checkout@v4

    # 2 – Host dependencies (just native libs & Grub tools)
    - name: Install host packages
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential bison flex libgmp3-dev libmpc-dev libmpfr-dev texinfo \
          grub-pc-bin xorriso mtools

    # 3 – Cache <workspace>/opt/cross between runs
    - name: Cache cross‑compiler
      id: cache-cross
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/opt/cross
        key: ${{ runner.os }}-gcc-${{ env.GCC_VERSION }}-${{ env.TARGET }}

    # 4 – Only build the toolchain when cache is missing
    - name: Build ${{ env.TARGET }} GCC ${GCC_VERSION}
      if: steps.cache-cross.outputs.cache-hit != 'true'
      run: |
        set -e
        prefix="$PWD/opt/cross"
        mkdir -p "$prefix"
        src="$PWD/src"
        mkdir -p "$src"
        cd "$src"

        # Binutils -----------------------------------------------------------
        wget -q https://ftp.gnu.org/gnu/binutils/binutils-2.42.tar.xz
        tar -xf binutils-2.42.tar.xz
        mkdir -p build-binutils && cd build-binutils
        ../binutils-2.42/configure --target=$TARGET --prefix="$prefix" \
          --with-sysroot --disable-nls --disable-werror
        make -j$(nproc)
        make install
        cd ..

        # GCC ---------------------------------------------------------------
        wget -q https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VERSION}/gcc-${GCC_VERSION}.tar.xz
        tar -xf gcc-${GCC_VERSION}.tar.xz
        mkdir -p build-gcc && cd build-gcc
        ../gcc-${GCC_VERSION}/configure --target=$TARGET --prefix="$prefix" \
          --disable-nls --enable-languages=c,c++ --without-headers
        make all-gcc -j$(nproc)
        make all-target-libgcc -j$(nproc)
        make install-gcc
        make install-target-libgcc

    # 5 – Expose toolchain to subsequent steps
    - name: Add cross‑compiler to PATH
      run: echo "$PWD/opt/cross/bin" >> "$GITHUB_PATH"

    - name: Verify toolchain
      run: |
        ${{ env.TARGET }}-gcc --version
        ${{ env.TARGET }}-ld  --version

    # 6 – Your actual project build
    - name: Build ISO
      run: make iso

    - name: Upload ISO
      uses: actions/upload-artifact@v4
      with:
        name: continuumos-${{ github.sha }}.iso
        path: kernel.iso
