name: build-and-release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  TARGET: i686-elf
  GCC_VERSION: "13.2.0"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1 – Checkout source
      - uses: actions/checkout@v4

      # 2 – Install host dependencies
      - name: Install host packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential bison flex libgmp3-dev libmpc-dev libmpfr-dev texinfo \
            grub-pc-bin xorriso mtools

      # 3 – Try to download pre-built i686-elf cross-compiler
      - name: Try pre-built i686-elf toolchain
        id: prebuilt
        continue-on-error: true
        run: |
          echo "Attempting to download pre-built i686-elf toolchain..."
          
          # Try downloading from lordmilko's releases (pre-built i686-elf toolchain)
          if wget -q https://github.com/lordmilko/i686-elf-tools/releases/download/13.1.0/i686-elf-tools-linux.zip -O /tmp/toolchain.zip; then
            sudo apt-get install -y unzip
            unzip -q /tmp/toolchain.zip -d /tmp/toolchain
            mkdir -p ${{ github.workspace }}/opt/cross
            if [ -d /tmp/toolchain/i686-elf-tools-linux ]; then
              cp -r /tmp/toolchain/i686-elf-tools-linux/* ${{ github.workspace }}/opt/cross/
              export PATH="${{ github.workspace }}/opt/cross/bin:$PATH"
              if command -v i686-elf-gcc &> /dev/null; then
                echo "found=true" >> "$GITHUB_OUTPUT"
                i686-elf-gcc --version
                echo "✓ Using pre-built i686-elf toolchain"
                exit 0
              fi
            fi
          fi
          
          echo "found=false" >> "$GITHUB_OUTPUT"
          echo "✗ Pre-built toolchain not available, will build from source"

      # 4 – Cache custom toolchain (only needed if building from source)
      - name: Cache cross-compiler
        id: cache-cross
        if: steps.prebuilt.outputs.found != 'true'
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/opt/cross
          key: ${{ runner.os }}-gcc-${{ env.GCC_VERSION }}-${{ env.TARGET }}

      # 5 – Build custom toolchain from source (only if no prebuilt and cache miss)
      - name: Build ${{ env.TARGET }} GCC ${{ env.GCC_VERSION }}
        if: steps.prebuilt.outputs.found != 'true' && steps.cache-cross.outputs.cache-hit != 'true'
        run: |
          set -e
          echo "Building cross-compiler from source (this will take ~15 minutes)..."
          prefix="$PWD/opt/cross"
          mkdir -p "$prefix"
          src="$PWD/src"
          mkdir -p "$src"
          cd "$src"

          # Binutils
          wget -q https://ftp.gnu.org/gnu/binutils/binutils-2.42.tar.xz
          tar -xf binutils-2.42.tar.xz
          mkdir -p build-binutils && cd build-binutils
          ../binutils-2.42/configure --target=$TARGET --prefix="$prefix" \
            --with-sysroot --disable-nls --disable-werror
          make -j$(nproc)
          make install
          cd ..

          # GCC
          wget -q https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VERSION}/gcc-${GCC_VERSION}.tar.xz
          tar -xf gcc-${GCC_VERSION}.tar.xz
          mkdir -p build-gcc && cd build-gcc
          ../gcc-${GCC_VERSION}/configure --target=$TARGET --prefix="$prefix" \
            --disable-nls --enable-languages=c,c++ --without-headers
          make all-gcc -j$(nproc)
          make all-target-libgcc -j$(nproc)
          make install-gcc
          make install-target-libgcc

      # 6 – Add toolchain to PATH
      - name: Add cross-compiler to PATH
        run: echo "$PWD/opt/cross/bin" >> "$GITHUB_PATH"

      # 7 – Verify toolchain
      - name: Verify toolchain
        run: |
          echo "Verifying i686-elf toolchain:"
          i686-elf-gcc --version
          i686-elf-ld --version

      # 8 – Build kernel
      - name: Build release ISO
        run: make clean && make release
        working-directory: ${{ github.workspace }}

      - name: Build FAT32 test image
        run: make test_fat32.img
        working-directory: ${{ github.workspace }}

      # 9 – Package ISO
      - name: Rename ISO
        run: mv kernel.iso continuumos.iso

      # 10 – Upload artifact (keeps same name for external automations)
      - uses: actions/upload-artifact@v4
        with:
          name: continuumos.iso
          path: continuumos.iso

      # 11 – Generate unique release version
      - name: Generate release version
        id: vars
        run: |
          echo "shortsha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
          echo "timestamp=$(date -u +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"
          echo "version=v$(date -u +'%Y%m%d.%H%M%S')-$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      # 12 – Publish release with unique tag (only on push to main)
      - name: Publish Release with ISO
        if: github.event_name == 'push'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.version }}
          name: "Build ${{ steps.vars.outputs.version }}"
          body: |
            **Build Time (UTC):** ${{ steps.vars.outputs.timestamp }}
            **Commit:** ${{ steps.vars.outputs.shortsha }}
            
            Download `continuumos.iso` and run with QEMU or burn to USB.
          generate_release_notes: true
          files: continuumos.iso
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
